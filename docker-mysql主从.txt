注意：从数据库的AUTO_INCREMENT=设置要与主数据库区分
alter table users AUTO_INCREMENT=10000;


mysql主从库同步错误：1062 Error 'Duplicate entry '1438019' for key 'PRIMARY'' on query
解决的办法是在从库上执行:

mysql>stop slave;
mysql>set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;
mysql>slave start;

 

上面的方法可以解决问题，还有一种解决问题的办法是通过修改mysql的配置文件，让从库的同步线程忽略这个错误，方法：

修改mysql配置文件 /etc/my.cnf 在 [mysqld]下加一行 slave_skip_errors = 1062 ,保存.重启mysql. mysql slave可以正常同步了.

http://outofmemory.cn/code-snippet/3177/mysql-zhucong-library-clock-error-：-1062-Error-Duplicate-entry-1438019-for-key-PRIMARY-on-query

============================================================
jlt.sql的admin_log id初始值10000000
============================================================
若mysql主服务器已经搭建好，加入从服务器
在mysql.cnf添加配置




server-id=1
log-bin=master-bin
log-bin-index=master-bin.index






重新搭建




mysql 主
mkdir /usr/local/mysqlData/master/cnf
mkdir /usr/local/mysqlData/master/data
vi /usr/local/mysqlData/master/cnf/mysql.cnf
===================================================
[mysqld]
pid-file    = /var/run/mysqld/mysqld.pid
socket    = /var/run/mysqld/mysqld.sock
datadir    = /var/lib/mysql

symbolic-links=0

character-set-server = utf8   
#skip-networking  
innodb_print_all_deadlocks = 1
max_connections = 2000  
max_connect_errors = 6000  
open_files_limit = 65535  
table_open_cache = 128   
max_allowed_packet = 4M  
binlog_cache_size = 1M  
max_heap_table_size = 8M  
tmp_table_size = 16M  
  
read_buffer_size = 2M  
read_rnd_buffer_size = 8M  
sort_buffer_size = 8M  
join_buffer_size = 28M  
key_buffer_size = 4M  
  
thread_cache_size = 8  
  
query_cache_type = 1  
query_cache_size = 8M  
query_cache_limit = 2M  
  
ft_min_word_len = 4  
  
log-bin = mysql-bin
server-id = 1
binlog_format = mixed  
 
performance_schema = 0  
explicit_defaults_for_timestamp  
  
#lower_case_table_names = 1  
  
interactive_timeout = 28800  
wait_timeout = 28800  

# Recommended in standard MySQL setup  
  
sql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER,STRICT_TRANS_TABLES   
  
[mysqldump]  
quick  
max_allowed_packet = 16M  
  
[myisamchk]
key_buffer_size = 8M
sort_buffer_size = 8M
read_buffer = 4M
write_buffer = 4M
==============================================================================
docker run -itd -p 3307:3306 --name master --network docker-lnmp_docker_net -v /usr/local/mysqlData/master/cnf:/etc/mysql/conf.d -v /usr/local/mysqlData/master/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=masterpwd mysql:5.6
=================================================================================
docker exec -it [containerID] /bin/bash
mysql -uroot -pmasterpwd 
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'masterpwd' WITH GRANT OPTION;
GRANT REPLICATION SLAVE ON *.* to 'reader'@'%' identified by 'readerpwd';
FLUSH PRIVILEGES;
==========================================================================================
mysql 从



mkdir /usr/local/mysqlData/slave/cnf
mkdir /usr/local/mysqlData/slave/data
vi /usr/local/mysqlData/slave/cnf/mysql.cnf
=========================================================
[mysqld]
pid-file    = /var/run/mysqld/mysqld.pid
socket    = /var/run/mysqld/mysqld.sock
datadir    = /var/lib/mysql

symbolic-links=0

character-set-server = utf8   
#skip-networking  
innodb_print_all_deadlocks = 1
max_connections = 2000  
max_connect_errors = 6000  
open_files_limit = 65535  
table_open_cache = 128   
max_allowed_packet = 4M  
binlog_cache_size = 1M  
max_heap_table_size = 8M  
tmp_table_size = 16M  
  
read_buffer_size = 2M  
read_rnd_buffer_size = 8M  
sort_buffer_size = 8M  
join_buffer_size = 28M  
key_buffer_size = 4M  
  
thread_cache_size = 8  
  
query_cache_type = 1  
query_cache_size = 8M  
query_cache_limit = 2M  
  
ft_min_word_len = 4  
  
log-bin = mysql-bin
server-id = 2
binlog_format = mixed  
 
performance_schema = 0  
explicit_defaults_for_timestamp  
  
#lower_case_table_names = 1  
  
interactive_timeout = 28800  
wait_timeout = 28800  

# Recommended in standard MySQL setup  
  
sql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER,STRICT_TRANS_TABLES   
  
[mysqldump]  
quick  
max_allowed_packet = 16M  
  
[myisamchk]
key_buffer_size = 8M
sort_buffer_size = 8M
read_buffer = 4M
write_buffer = 4M
===============================================================================
docker run -itd -p 3308:3306 --name slave --network docker-lnmp_docker_net -v /usr/local/mysqlData/slave/cnf:/etc/mysql/conf.d -v /usr/local/mysqlData/slave/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=slavepwd mysql:5.6
=================================================================================
docker exec -it [containerID] /bin/bash
mysql -uroot -pslavepwd
grant SHOW DATABASES,SELECT on *.* to 'slave'@'%' identified by 'slavepwd';
FLUSH PRIVILEGES;
================================================================================

进入master（查看master状态，记录File和Position）
show master status;
===============================================================================
master_host为docker的地址不能写127.0.0.1 
master_user是在主库创建的用户  
master_log_pos是主库show master status;
查询出的Position
change master to master_host='172.100.0.5',master_user='reader',master_password='readerpwd',master_log_file='master-bin.000001',master_log_pos=612;
start slave;

show slave status\G


测试

进入master
create database slavetest;
进入slave
show databases;





遇到的问题和排错
	遇到的问题
	Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: 'Could not find first log file name in binary log index file'
排错方法
	首先查看执行的change master命令是否存在空格,如果change master命令没有错误。
做如下操作


从库
停止主从关系
mysql>stop slave;


主库
刷新binlog日志
mysql>flush logs;


查看binlog和pos号
mysql>show master status;
例：mysql-bin.000015,pos为120。


从库
执行命令，使binlog和pos对应主库
mysql>change master to master_log_file='master-bin.000002',master_log_pos=120;
开启主从服务
mysql>start slave;


查看主从状态
mysql>show slave status\G;









如果这时的IO线程还为NO，还报error1236，可能是因为主库服务器重启所致，找不到binlog的pos号。或者因为binlog过旧，因为binlog日志默认设置为保留七天。
解决方法
从库
mysql>stop slave；
主库
切换到binlog日志目录
cd /data/mysql/bin/
ls
找到最后一个binlog为mysql-bin.000053,将binlog重定向到text文件中
/usr/local/mysql/bin/mysqlbinlog  mysql-bin.000053>test.txt
然后
less  test.txt
# at 54378
#111010 16:35:46 server id 1 end_log_pos 627625631 Query thread_id=45613333
exec_time=32758 error_code=0
SET TIMESTAMP=1318289746/*!*/;
delete from freeshipping_bef_update where part='AR-4006WLM' and code=''
/*!*/;
# at54580
#111010 16:35:46 server id 1 end_log_pos627625751 Query thread_id=45613333
exec_time=32758 error_code=0
SET TIMESTAMP=1318289746/*!*/;
delete from shippingFee_special where part='AR-4006WLM'
/*!*/;
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
找到最接近错误标记的一个position是54580.

从库

mysql>change master to master_log_file='mysql-bin.000053',master_log_pos=54580;

mysql>start slave;

mysql>show slave status\G;

这时的IO线程和SQL线程应该全部为YES。主从复制服务开启。